<chapter xml:id="spatial" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>EPL Reference: Spatial Methods and Indexes</title>
        
	<sect1 xml:id="spatial_intro">
		<title>Overview</title>
		<indexterm><primary>methods</primary><secondary>spatial</secondary></indexterm>
		
		<para>
			EPL provides spatial methods and spatial indexes.  
		</para>
		
		<para>
			The engine analyzes the <literal>where</literal>-clause for correlation criteria and considers spatial methods for query plans that can utilize spatial indexes.
		</para>

		<para>
			For general information on the dot-operator please consult <xref linkend="epl-operator-ref-dot"/>.
		</para>

		<para>
			For general information on creating an index please consult <xref linkend="named_explicit_index"/>.
		</para>
	</sect1>
	
	<sect1 xml:id="spatial_method">
		<title>Spatial Methods</title>
		<indexterm><primary>method</primary><secondary>spatial</secondary></indexterm>
		
		<para>
			The below table summarizes the built-in spatial methods available:
		</para>

		<table frame="topbot" xml:id="spatial_method_table" revision="2">
			<title>Spatial Methods</title>
			<tgroup cols="2">
				<colspec colwidth="1.0*"/>
				<colspec colwidth="2.0*"/>
				<thead>
					<row>
						<entry>Method</entry>
						<entry>Result</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>point(coordinates).inside(rectangle(coordinates, size))</entry>
						<entry>
							<para>
								Returns true if the point is inside the rectangle.
							</para>
							<para>
								<xref linkend="spatial_method_pointinsiderectangle"/>.
							</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>		

		<sect2 xml:id="spatial_method_pointinsiderectangle">
		  <title>Point-Inside-Rectangle</title>
		  
		  	<para>
				The method compares a point to a rectangle and returns true if the point falls inside the rectangle.
			</para>
			
			<para>
				The method takes a point as input and a rectangle as a parameter:
			</para>
			<synopsis>point(<emphasis>point_x</emphasis>, <emphasis>point_y</emphasis>).inside(rectangle(<emphasis>rect_x</emphasis>, <emphasis>rect_y</emphasis>, <emphasis>width</emphasis>, <emphasis>height</emphasis>))</synopsis>

			<para>
				For the point, please provide the <emphasis>point_x</emphasis> and <emphasis>point_y</emphasis> expressions that return the (x, y)-coordinates of the point. 
			</para>

			<para>
				For the rectangle, the <emphasis>rect_x</emphasis> expression and <emphasis>rect_y</emphasis> expressions return the (x, y)-coordinates of the rectangle and the <emphasis>width</emphasis> expression and <emphasis>height</emphasis> expressions return the width and height of the rectangle.
			</para>

			<para>
				All expressions must return a number-type and the implementation compares the <literal>double</literal>-values returned by the expressions. 
			</para>

			<para>
				A point is considered inside the rectangle if <literal>(point_x &gt;= rect_x) and (point_x &lt; rect_x + width) and (point_y &gt;= rect_y) and (point_y &lt; rect_y + height)</literal>.
			</para>

			<table frame="topbot" xml:id="spatial_method_pointinsiderectange" revision="2">
				<title>Point-Inside-Rectangle Examples</title>
				<tgroup cols="2">
					<colspec colwidth="5.0*"/>
					<colspec colwidth="1.0*"/>
					<thead>
						<row>
							<entry>Expression</entry>
							<entry>Result</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><synopsis>point(10, 20).inside(rectange(0, 0, 50, 50))</synopsis></entry>
							<entry>true</entry>
						</row>
						<row>
							<entry><synopsis>point(10, 20).inside(rectange(20, 20, 50, 50))</synopsis></entry>
							<entry>false</entry>
						</row>
						<row>
							<entry><synopsis>point(10, 20).inside(rectange(9, 19, 1, 1))</synopsis></entry>
							<entry>false</entry>
						</row>
						<row>
							<entry><synopsis>point(10, 20).inside(rectange(9, 19, 1.0001, 1.0001))</synopsis></entry>
							<entry>true</entry>
						</row>
					</tbody>
				</tgroup>
			</table>		

			<para>
				The next example declares a table that contains points:
			</para>
			<programlisting>create table PointTable(pointId string primary key, px double, py double)</programlisting>
			
			<para>
				The example also creates a quadtree-index on the points, so that the engine can find points using an index:
			</para>
			<programlisting>create index PointIndex on PointTable((px, py) pointregionquadtree(0, 0, 100, 100))</programlisting>
			
			<para>
				The example schema for events providing rectangles is:
			</para>
			<programlisting>create schema RectangleEvent(rx double, ry double, w double, h double)</programlisting>
			
			<para>
				This EPL outputs, upon arrival of a RectangleEvent, all points that fall inside the rectange:
			</para>
			<programlisting>on RectangleEvent
select pointId from PointTable
where point(px, py).inside(rectangle(rx, ry, w, h))</programlisting>

			<para>
				Internally the engine does not instantiate point or rectange objects at all but instead optimizes the expression to comparison between <literal>double</literal>-type values.
			</para>
		</sect2>
	</sect1>

	<sect1 xml:id="spatial_index">
		<title>Spatial Index - Quadtree</title>
		<indexterm><primary>index</primary><secondary>spatial</secondary></indexterm>
		
		<sect2 xml:id="spatial_index_use">
			<title>Declaring a Quadtree Index</title>
			<para>
				A quadtree is a tree data structure in which each internal node has exactly four children. 
				Quadtrees are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions (source:WikiPedia).			
			</para>		
			
			<para>
				A node in a point-region quadtree contains:
			</para>
			<itemizedlist>
				<ns:listitem>
					<para>
						Four pointers to nodes: quadrant [‘NW’], quadrant [‘NE’], quadrant [‘SW’], and quadrant [‘SE’].
					</para>
				</ns:listitem>
				<ns:listitem>
					<para>
						(x,y) Coordinates; each coordinate pair is associated to one or more events; same (x, y) coordinates share the same entry.
					</para>
				</ns:listitem>
			</itemizedlist>
			
			<para>
				Declare a point-region quadtree as follows:
			</para>
			<synopsis>create index ... on ... (
  (<emphasis>x_expression</emphasis>, <emphasis>y_expression</emphasis>) pointregionquadtree(<emphasis>min_x_expression</emphasis>, <emphasis>min_y_expression</emphasis>, 
  <emphasis>width</emphasis>, <emphasis>height</emphasis> [, <emphasis>leaf_capacity_expression</emphasis> [, <emphasis>max_tree_height_expression</emphasis>]])
)</synopsis>
	
			<para>
				The <emphasis>x_expression</emphasis> and <emphasis>y_expression</emphasis> expresions form the index columns. 
				The expressions return the (x, y)-coordinates and must return numeric values.  Coordinates are represented as <literal>double</literal>-type values internally.
			</para>
	
			<para>
				The <emphasis>min_x_expression</emphasis>, <emphasis>min_y_expression</emphasis>,  <emphasis>width</emphasis>, <emphasis>height</emphasis> are index parameter expressions 
				that return the range of the index. The width and height must be greater zero. The index range rectangle is represented by <literal>double</literal>-type values internally.
				A point is inside the index range if <literal>x &gt;= minX and y &gt;= minY and x &lt; minX+width and y &lt; minY+height</literal>.
			</para>
				
			<note>
				<para>
				An attempt to insert points into the index that are outside of the declared index range causes an exception. 
				</para>
			</note>

			<para>
				The <emphasis>leaf_capacity_expression</emphasis> is optional and must return a positive integer. It defines the number of coordinates a node may contain before it gets split into regions.
				The default value is 4.
			</para>
	
			<para>
				The <emphasis>max_tree_height_expression</emphasis> is optional and must return an integer value of 2 or more. It defines the maximum depth of the tree. 
				Upon the tree reaching the maximum depth a leaf node  does not get split into regions. The default value is 20.
			</para>
			
			<para>
				For example, assume we have a table that contains points:
			</para>
			<programlisting>create table PointTable(pointId string primary key, px double, py double)</programlisting>
			
			<para>
				This example EPL declare an index on the points, with <literal>px</literal> and <literal>py</literal> becoming index columns that determine (x, y)-coordinates:
			</para>
			<programlisting>create index PointIndex on PointTable((px, py) pointregionquadtree(0, 0, 100, 100))</programlisting>

			<para>
				The above sample quadtree index expects (x, y)-coordinates that are in the range <literal>0 &lt;= px &lt;= 100</literal> and <literal>0 &lt;= py &lt;= 100</literal>.
			</para>
		</sect2>

		<sect2 xml:id="spatial_index_notes">
			<title>Quadtree Index Usage Notes</title>
			<para>
				Quadtree indexes allow computed values for both index columns and index parameters. For example, the following EPL declares an index wherein (x, y)-coordinates are <literal>(px/100, py/100)</literal>-values. The sample EPL assumes that <literal>context.frame</literal> is a built-in property as provided by context <literal>FramedCtx</literal>:
			</para>		
			<programlisting>context FramedCtx create index PointIndex on PointTable((Math.round(px/100), Math.round(py/100)) pointregionquadtree(context.frame.startx, context.frame.starty, context.frame.w, context.frame.h))</programlisting>
			
			<para>
				The engine compares the index column expressions to the <literal>point-in-rectangle</literal> left-hand-side expressions to determine which index to use.				
				For example, if the expression is <literal>point(px+1, py+1).inside(rectangle(rx, ry, w, h))</literal>
				as <literal>(px+1, py+1)</literal> does not match <literal>(Math.round(px/100), Math.round(py/100))</literal> the query planner does not use the index.
				If the expression is <literal>point(Math.round(px/100), Math.round(py/100)).inside(rectangle(rx, ry, w, h))</literal> the query planner does use the index as index column expressions match.
			</para>
			
			<para>
				The query planner prefers quadtree over other index types. Index hints are not yet available for query planning with quadtree indexes.
			</para>			
		</sect2>
	</sect1>
</chapter>
