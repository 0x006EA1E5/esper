<appendix xml:id="appendix_eventrepavro" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

   <title>Event Representation: Avro Events (<literal>org.apache.avro.generic.GenericData.Record)</literal></title>
	<indexterm><primary>avro event representation</primary></indexterm>
	<indexterm><primary>event</primary><secondary>Avro representation</secondary></indexterm>

    <para>
		This section provides information for using Avro to represent events. 
    </para>

	<sect1 xml:id="appendix_eventrepavro_overview">
	   <title>Overview</title>
		<para>
			An event can be represented by an Avro <literal>GenericData.Record</literal> instance. Event properties of Avro events are the fields in the record schema. 
		</para>
		
		<para>
			The advantages for supporting Avro as an event representation are:
		</para>
		
		<itemizedlist>
			<ns:listitem>
				<para>Avro has excellent support for JSON, allowing JSON for incoming and outgoing events, while not compromising on type-safety since Avro provides a schema.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro has rich, extensible, standardized schema language defined in pure JSON; event types / schemas can be defined/imported/exported with EPL or from external sources.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro offers a compact binary representation and is thus efficient and fast for use with EsperHA persistence or for input/output in wire transfer.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro has a compact event representation reducing memory use, as each event is only a schema-reference and an Object[] (see GenericData.Record).</para>
			</ns:listitem>
			<ns:listitem>
				<para>JSON itself is not memory efficient while Avro is: JSON repeats every field name with every single record and JSON alone is inefficient for high-volume usage.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro allows fast access to event properties since reading an event property value only requires reading the GenericData.Record-internal object-array at a given index.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro has bindings for a wide variety of programming languages and platforms and has RPC and file representations.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro does not require code generation so EPL can be written generically for any data stream. Type information can be made available at runtime while still providing type-safety.
				There is no need to generate Java code beforehand, therefore there is no need to manage generated classes, or to reload classes or to restart the process to reload classes.</para>
			</ns:listitem>
			<ns:listitem>
				<para>Avro has the notion of schema compatibility for evolving your event data over time.</para>
			</ns:listitem>
		</itemizedlist>

		<para>
			Similar to the Map and object-array event type, the Avro event type takes part in the comprehensive type system that can eliminate the need to use Java classes as event types, thereby making it easier to change types at runtime or generate or import/export type information from/to another source/destination.
		</para>

		<para>
			The engine can process Avro's <literal>GenericData.Record</literal> events via the <literal>sendEventAvro(Object avroGenericDataDotRecord, String avroEventTypeName)</literal> method on the <literal>EPRuntime</literal> interface.
		</para>
		
		<para>
			The engine does not validate Avro events. Your application must ensure that Avro values match the declaration of the schema and that the schema of the event matches the schema declared for the event type of the event.
		</para>

		<para>
			A given Avro event type can have only a single supertype that must also be an Avro event type. All properties available on the Avro supertype is also available on the type itself. In addition, anywhere within EPL that an event type name of an Avro supertype is used, the Avro subtype and the subtype of the subtype match that expression.
			Note that access to properties is by field position thereby subtype and supertype field positions should be congruent.
		</para>
	</sect1>
			
	<sect1 xml:id="appendix_eventrepavro_properties">
	   <title>Avro Event Properties</title>
		<para>
			Event properties can be of any Avro schema type.
		</para>
		
		<para>
			In order to use Avro events, the event type name and Avro schema must be made known to the engine via configuration or <literal>create avro schema</literal> EPL syntax. Please see examples in <xref linkend="epl_createschema"/> and <xref linkend="config-avro"/>.
		</para>
										
		<para>
			The code snippet below defines an Avro event type, creates an Avro event and sends the event into the engine. The sample defines the <literal>CarLocUpdateEvent</literal> event type via the runtime configuration interface (<literal>create schema</literal> or static configuration could have been used instead).
		</para>

		<programlisting><![CDATA[// Define CarLocUpdateEvent event type (example for runtime-configuration interface)
Schema schema = record("CarLocUpdateEvent").fields()
  .name("carId").type().stringBuilder().prop(PROP_JAVA_STRING_KEY, PROP_JAVA_STRING_VALUE).endString().noDefault()
  .requiredInt("direction")
  .endRecord();
ConfigurationEventTypeAvro avroEvent = new ConfigurationEventTypeAvro(schema);
epService.getEPAdministrator().getConfiguration().addEventTypeAvro("CarLocUpdateEvent", avroEvent);]]></programlisting>
	
		<para>
			The <literal>CarLocUpdateEvent</literal> can now be used in a statement:
		</para>
		<programlisting>select count(*) from CarLocUpdateEvent(direction = 1)#time(1 min)</programlisting> 
		
		<para>
			The sample code to send an event is:
		</para>
		<programlisting><![CDATA[GenericData.Record event = new GenericData.Record(schema);
event.put("carId", "A123456");
event.put("direction", 1);
epService.getEPRuntime().sendEventAvro(event, "CarLocUpdateEvent");]]></programlisting>
	</sect1>
	
	<sect1 xml:id="appendix_eventrepavro_typemapping">
	   <title>Avro Type Mapping</title>
	   
	   <para>
			This section lists for each JVM type the default Avro schema that the engine uses when assembling an Avro schema from a <literal>select</literal>-clause.
	   </para>
	   
		<para>
			For example, consider the following EPL statement. The statement assumes that <literal>MyEvent</literal> is a pre-registered event type of any kind (Map, Avro, Object-Array, POJO etc.):
		</para>
		<programlisting><![CDATA[@EventRepresentation(avro) select 1 as carId, 'abc' as carType from MyEvent]]></programlisting>

		<para>
			Your application may obtain the schema for the statement output event type as follows:
		</para>
		<programlisting><![CDATA[String epl = "@EventRepresentation(avro) select 1 as carId, 'abc' as carType from MyEvent";
EPStatement stmt = epService.getEPAdministrator().createEPL(epl);
Schema schema = (Schema) ((AvroSchemaEventType) stmt.getEventType()).getSchema();]]></programlisting>
	
		<para>
			The engine generates an Avro schema based on the expressions in the <literal>select</literal>-clause. The schema in pretty-print may look like this:
		</para>
		<programlisting><![CDATA[{
  "type" : "record",
  "name" : "anonymous_1_result_",
  "fields" : [ {
    "name" : "carId",
    "type" : "int"
  }, {
    "name" : "carType",
    "type" : {
      "type" : "string",
      "avro.java.string" : "String"
    }
  } ]
}]]></programlisting>

		<para>
			Please consult <xref linkend="config-engine-eventmeta-avro"/> for details on controlling default mapping.
			Tables below outline the default mapping and provide alternative schemas depending on the avro settings .
		</para>

		<para>
			By default the engine maps expression result types to Avro schema using non-null schema types. 
			By default, for String-type values, the engine sets the <literal>avro.java.string</literal> property to <literal>String</literal> to ensure that Avro uses <literal>java.lang.String</literal> to represent strings (and not <literal>org.apache.avro.util.Utf8</literal>).
			The tables below outline the default mapping and provide alternative schemas, which apply according to Esper Avro settings.
		</para>

		<para>
			The mapping from primitive and string type to Avro schema is:
		</para>
		
		<table frame="topbot">
			<title>Primitive and String Mapping</title>
			<tgroup cols="3">
				<colspec colwidth="0.30*"/>
				<colspec colwidth="1*"/>
				<colspec colwidth="1*"/>
				<thead>
					<row>
						<entry>Type</entry>
						<entry>Default Schema</entry>
						<entry>Alternative Schemas</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>byte</entry>
						<entry><programlisting>"int"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.Byte</entry>
						<entry><programlisting>"int"</programlisting></entry>
						<entry><programlisting>["null","int"]</programlisting></entry>
					</row>
					<row>
						<entry>boolean</entry>
						<entry><programlisting>"boolean"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.Boolean</entry>
						<entry><programlisting>"boolean"</programlisting></entry>
						<entry><programlisting>["null","boolean"]</programlisting></entry>
					</row>
					<row>
						<entry>double</entry>
						<entry><programlisting>"double"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.Double</entry>
						<entry><programlisting>"double"</programlisting></entry>
						<entry><programlisting>["null","double"]</programlisting></entry>
					</row>
					<row>
						<entry>float</entry>
						<entry><programlisting>"float"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.Float</entry>
						<entry><programlisting>"float"</programlisting></entry>
						<entry><programlisting>["null","float"]</programlisting></entry>
					</row>
					<row>
						<entry>int</entry>
						<entry><programlisting>"int"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.Integer</entry>
						<entry><programlisting>"int"</programlisting></entry>
						<entry><programlisting>["null","int"]</programlisting></entry>
					</row>
					<row>
						<entry>long</entry>
						<entry><programlisting>"long"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.Long</entry>
						<entry><programlisting>"long"</programlisting></entry>
						<entry><programlisting>["null","long"]</programlisting></entry>
					</row>
					<row>
						<entry>null</entry>
						<entry><programlisting>"null"</programlisting></entry>
						<entry>N/A</entry>
					</row>
					<row>
						<entry>java.lang.String and java.lang.CharSequence</entry>
						<entry><programlisting>{"type":"string","avro.java.string":"String"}</programlisting></entry>
						<entry><programlisting>"string"</programlisting> or <programlisting>["null","string"]</programlisting> or <programlisting>["null",{"type":"string","avro.java.string":"String"}]</programlisting></entry>
					</row>
				</tbody>
			</tgroup>				
		</table>

		<para>
			The mapping from array-type to Avro schema is:
		</para>
		
		<table frame="topbot">
			<title>Array Type Mapping</title>
			<tgroup cols="3">
				<colspec colwidth="0.30*"/>
				<colspec colwidth="1*"/>
				<colspec colwidth="1*"/>
				<thead>
					<row>
						<entry>Type</entry>
						<entry>Default Schema</entry>
						<entry>Alternative Schemas</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>byte[]</entry>
						<entry><programlisting>"bytes"</programlisting></entry>
						<entry><programlisting>["null","bytes"]</programlisting></entry>
					</row>
					<row>
						<entry>Byte[]</entry>
						<entry><programlisting>{"type":"array","items":["null","int"]}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":["null","int"]}]</programlisting></entry>
					</row>
					<row>
						<entry>boolean[]</entry>
						<entry><programlisting>{"type":"array","items":"boolean"}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":"boolean"}]</programlisting></entry>
					</row>
					<row>
						<entry>Boolean[]</entry>
						<entry><programlisting>{"type":"array","items":["null","boolean"]}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":["null","boolean"]}]</programlisting></entry>
					</row>
					<row>
						<entry>double[]</entry>
						<entry><programlisting>{"type":"array","items":"double"}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":"double"}]</programlisting></entry>
					</row>
					<row>
						<entry>Double[]</entry>
						<entry><programlisting>{"type":"array","items":["null","double"]}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":["null","double"]}]</programlisting></entry>
					</row>
					<row>
						<entry>float[]</entry>
						<entry><programlisting>{"type":"array","items":"float"}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":"float"}]</programlisting></entry>
					</row>
					<row>
						<entry>Float[]</entry>
						<entry><programlisting>{"type":"array","items":["null","float"]}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":["null","float"]}]</programlisting></entry>
					</row>
					<row>
						<entry>int[]</entry>
						<entry><programlisting>{"type":"array","items":"int"}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":"int"}]</programlisting></entry>
					</row>
					<row>
						<entry>Integer[]</entry>
						<entry><programlisting>{"type":"array","items":["null","int"]}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":["null","int"]}]</programlisting></entry>
					</row>
					<row>
						<entry>long[]</entry>
						<entry><programlisting>{"type":"array","items":"long"}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":"long"}]</programlisting></entry>
					</row>
					<row>
						<entry>Long[]</entry>
						<entry><programlisting>{"type":"array","items":["null","long"]}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":["null","long"]}]</programlisting></entry>
					</row>
					<row>
						<entry>java.lang.String[] and java.lang.CharSequence[]</entry>
						<entry><programlisting>{"type":"array","items":{"type":"string","avro.java.string":"String"}}</programlisting></entry>
						<entry><programlisting>["null",{"type":"array","items":{"type":"string","avro.java.string":"String"}}]</programlisting> or <programlisting>{"type":"array","items":"string"}</programlisting> (or the combination)</entry>
					</row>
				</tbody>
			</tgroup>				
		</table>

		<para>
			Additional mappings to Avro schema are:
		</para>
		
		<table frame="topbot">
			<title>Additional Mapping</title>
			<tgroup cols="3">
				<colspec colwidth="0.30*"/>
				<colspec colwidth="1*"/>
				<colspec colwidth="1*"/>
				<thead>
					<row>
						<entry>Type</entry>
						<entry>Default Schema</entry>
						<entry>Alternative Schemas</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>java.util.Map</literal> interface implementation</entry>
						<entry><programlisting>{"type":"map","values":{"type":"string","avro.java.string":"String"}}</programlisting></entry>
						<entry><programlisting>["null",{"type":"map","values":{"type":"string","avro.java.string":"String"}}]</programlisting></entry>
					</row>
				</tbody>
			</tgroup>				
		</table>
		
	</sect1>
</appendix>
