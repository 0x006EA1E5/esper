/*
 ***************************************************************************************
 *  Copyright (C) 2006 EsperTech, Inc. All rights reserved.                            *
 *  http://www.espertech.com/esper                                                     *
 *  http://www.espertech.com                                                           *
 *  ---------------------------------------------------------------------------------- *
 *  The software in this package is published under the terms of the GPL license       *
 *  a copy of which has been included with this distribution in the license.txt file.  *
 ***************************************************************************************
 */
package com.espertech.esper.epl.core;

import com.espertech.esper.client.EventBean;
import com.espertech.esper.codegen.core.CodegenBlock;
import com.espertech.esper.codegen.core.CodegenContext;
import com.espertech.esper.codegen.core.CodegenMethodId;
import com.espertech.esper.codegen.model.blocks.CodegenLegoMayVoid;
import com.espertech.esper.codegen.model.expression.CodegenExpression;
import com.espertech.esper.codegen.model.method.CodegenParamSetExprPremade;
import com.espertech.esper.codegen.model.method.CodegenParamSetSelectPremade;
import com.espertech.esper.epl.expression.core.ExprEvaluator;
import com.espertech.esper.epl.expression.core.ExprEvaluatorContext;

import static com.espertech.esper.codegen.model.expression.CodegenExpressionBuilder.*;

/**
 * Works in conjunction with {@link SelectExprResultProcessor} to present
 * a result as an object array for 'natural' delivery.
 */
public class BindProcessor {
    private final BindProcessorForge forge;
    private final ExprEvaluator[] expressionNodes;

    public BindProcessor(BindProcessorForge forge, ExprEvaluator[] expressionNodes) {
        this.forge = forge;
        this.expressionNodes = expressionNodes;
    }

    public Object[] process(EventBean[] eventsPerStream, boolean isNewData, ExprEvaluatorContext exprEvaluatorContext) {
        Object[] parameters = new Object[expressionNodes.length];

        for (int i = 0; i < parameters.length; i++) {
            Object result = expressionNodes[i].evaluate(eventsPerStream, isNewData, exprEvaluatorContext);
            parameters[i] = result;
        }

        return parameters;
    }

    protected static CodegenExpression processCodegen(BindProcessorForge forge, CodegenParamSetSelectPremade params, CodegenContext context) {
        CodegenBlock block = context.addMethod(Object[].class, BindProcessor.class).add(CodegenParamSetExprPremade.INSTANCE).begin()
                .declareVar(Object[].class, "parameters", newArray(Object.class, constant(forge.getExpressionForges().length)));
        for (int i = 0; i < forge.getExpressionForges().length; i++) {
            block.assignArrayElement("parameters", constant(i), CodegenLegoMayVoid.expressionMayVoid(forge.getExpressionForges()[i], CodegenParamSetExprPremade.INSTANCE, context));
        }
        CodegenMethodId method = block.methodReturn(ref("parameters"));
        return localMethodBuild(method).pass(params.passEPS()).pass(params.passIsNewData()).pass(params.passEvalCtx()).call();
    }

    /**
     * Returns the expression types generated by the select-clause expressions.
     *
     * @return types
     */
    public Class[] getExpressionTypes() {
        return forge.getExpressionTypes();
    }

    /**
     * Returns the column names of select-clause expressions.
     *
     * @return column names
     */
    public String[] getColumnNamesAssigned() {
        return forge.getColumnNamesAssigned();
    }
}
